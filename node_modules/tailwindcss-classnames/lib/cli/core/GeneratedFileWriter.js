"use strict";
/* eslint-disable @typescript-eslint/restrict-template-expressions */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratedFileWriter = void 0;
var tslib_1 = require("tslib");
var fs_1 = require("fs");
var vm_1 = tslib_1.__importDefault(require("vm"));
var path_1 = tslib_1.__importDefault(require("path"));
var colors_1 = tslib_1.__importDefault(require("colors"));
var ClassnamesGenerator_1 = require("./ClassnamesGenerator");
var TailwindConfigParser_1 = require("./TailwindConfigParser");
var FileContentGenerator_1 = require("./FileContentGenerator");
/**
 * Responsible for writing a file with the generated content to the disk.
 */
var GeneratedFileWriter = /** @class */ (function () {
    /**
     * Initializes a new instance of `GeneratedFileWriter` class.
     * @param options The parsed CLI options from user input.
     */
    function GeneratedFileWriter(options) {
        var _this = this;
        /** The data returned from reading the config file */
        this._configFileData = '';
        /**
         * Writes the generated file to disk.
         */
        this.write = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var error_1, contentGenerationResult;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.validateCliOptions()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        return [2 /*return*/];
                    case 3: return [4 /*yield*/, this.generateFileContent()];
                    case 4:
                        contentGenerationResult = _a.sent();
                        // Then write the generation result to a file with the provided value from the CLI interface.
                        fs_1.promises.writeFile("" + this._outputFilename, contentGenerationResult, 'utf8')
                            .then(function () {
                            _this.printCliMessage('success', "Types has successfully been generated in " + _this._outputFilename + " file.");
                        })
                            .catch(function (error) {
                            _this.printCliMessage('error', error);
                        });
                        return [2 /*return*/];
                }
            });
        }); };
        this.evaluateTailwindConfigFile = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        _a = this;
                        return [4 /*yield*/, fs_1.promises.readFile("./" + this._configFilename, { encoding: 'utf-8' })];
                    case 1:
                        _a._configFileData = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _b.sent();
                        this.printCliMessage('error', "Error Reading: \"./" + this._configFilename + "\"");
                        return [3 /*break*/, 3];
                    case 3: 
                    // Execute the config file content as JavaScript code
                    return [2 /*return*/, vm_1.default.runInNewContext(this._configFileData, {
                            __dirname: path_1.default.dirname(path_1.default.resolve("./" + this._configFilename)),
                            require: require,
                            module: {},
                            process: process,
                        })];
                }
            });
        }); };
        this.generateFileContent = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var evaluatedConfig, configParser, generatedClassnames, fileContentTemplate, customClassesImportPath;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.evaluateTailwindConfigFile()];
                    case 1:
                        evaluatedConfig = _a.sent();
                        configParser = new TailwindConfigParser_1.TailwindConfigParser(evaluatedConfig, {
                            pluginTypography: this._configFileData.includes('@tailwindcss/typography'),
                            pluginCustomForms: this._configFileData.includes('@tailwindcss/custom-forms'),
                        });
                        generatedClassnames = new ClassnamesGenerator_1.ClassnamesGenerator(configParser).generate();
                        fileContentTemplate = new FileContentGenerator_1.FileContentGenerator(generatedClassnames, configParser.getPrefix()).generateFileContent();
                        customClassesImportPath = null;
                        if (!!this._outputFilename && !!this._customClassesFilename) {
                            customClassesImportPath = path_1.default
                                .join(path_1.default.relative(path_1.default.join(process.cwd(), path_1.default.dirname(this._outputFilename)), path_1.default.join(process.cwd(), path_1.default.dirname(this._customClassesFilename))), path_1.default.basename(this._customClassesFilename))
                                // Convert any Windows path separators to posix
                                .replace(/\\/g, '/')
                                .replace(/(\.d)?\.ts$/, '');
                            customClassesImportPath =
                                customClassesImportPath[0] === '.'
                                    ? customClassesImportPath
                                    : "./" + customClassesImportPath;
                        }
                        // Return final file content
                        return [2 /*return*/, (fileContentTemplate
                                // Append the custom classes types from external file if provided.
                                .replace(/T_CUSTOM_CLASSES_IMPORT_STATEMENT/g, !!customClassesImportPath
                                ? "import type TCustomClassesFromExternalFile from '" + customClassesImportPath + "';"
                                : '')
                                .replace(/ ?IMPORTED_T_CUSTOM_CLASSES_KEY/g, !!customClassesImportPath ? ' | TCustomClassesFromExternalFile' : '')
                                .replace(/ ?IMPORTED_T_CUSTOM_CLASSES_ARG/g, !!customClassesImportPath ? '| TCustomClassesFromExternalFile\n' : ''))];
                }
            });
        }); };
        this.validateCliOptions = function () {
            // Check for missing cli options
            if (!_this._configFilename) {
                _this.printCliMessage('error', 'tailwindcss config file name or path is not provided');
                throw new Error();
            }
            if (!_this._outputFilename) {
                _this.printCliMessage('error', 'Please provide a valid filename to add generated types to it');
                throw new Error();
            }
            // Check for invalid custom classes file content
            if (!!_this._customClassesFilename) {
                return fs_1.promises
                    .readFile("./" + _this._customClassesFilename)
                    .then(function (data) {
                    if (!data.toString().includes('export default')) {
                        _this.printCliMessage('error', 'The type having the custom classes must be a default export');
                    }
                })
                    .catch(function (error) {
                    _this.printCliMessage('error', "Unable to read the file with custom types. " + error);
                    throw new Error();
                });
            }
            return Promise.resolve();
        };
        this.printCliMessage = function (type, message) {
            var formattedMessage = '\n\n' + message + '\n' + '\n\n';
            switch (type) {
                case 'success':
                    console.log(colors_1.default.black.bgGreen(formattedMessage));
                    break;
                case 'error':
                    console.error(colors_1.default.white.bgRed(formattedMessage));
                    break;
                default:
                    console.log(formattedMessage);
                    break;
            }
        };
        this._configFilename = options.configFilename;
        this._outputFilename = options.outputFilename;
        this._customClassesFilename = options.customClassesFilename;
    }
    return GeneratedFileWriter;
}());
exports.GeneratedFileWriter = GeneratedFileWriter;
//# sourceMappingURL=GeneratedFileWriter.js.map