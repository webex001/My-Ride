"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileContentGenerator = void 0;
var tslib_1 = require("tslib");
var lodash_1 = tslib_1.__importDefault(require("lodash"));
var FileContentGenerator = /** @class */ (function () {
    /**
     * Initializes a new instance of the `FileContentGenerator` class.
     * @param generatedClassnames The generated classnames to put in the template.
     */
    function FileContentGenerator(generatedClassnames, ConfigPrefix) {
        var _this = this;
        this.generateFileContent = function () {
            return (_this.fileHeaderTemplate() +
                '\n\n' +
                _this.importStatementsTemplate() +
                '\n\n' +
                _this.allClassnamesTypesTemplate() +
                '\n\n' +
                _this.mainExportStatementsTemplate());
        };
        this.fileHeaderTemplate = function () {
            return ('/* eslint-disable */\n' +
                '/* tslint:disable */\n' +
                '\n' +
                '//////////////////////////////////////////////////////////////////////////////\n' +
                '/// Autogenerated by tailwindcss-classnames CLI. https://git.io/JtsPU\n' +
                '/// DO NOT EDIT THIS FILE DIRECTLY!\n' +
                '//////////////////////////////////////////////////////////////////////////////\n');
        };
        this.importStatementsTemplate = function () {
            return "import classnamesLib from 'clsx';" + '\n' + "T_CUSTOM_CLASSES_IMPORT_STATEMENT";
        };
        this.allClassnamesTypesTemplate = function () {
            var regularClassnames = _this._generatedClassNames.regularClassnames;
            var pseudoClassnames = _this._generatedClassNames.pseudoClassnames;
            var regularClassnamesTemplate = Object.keys(regularClassnames)
                .map(function (classGroup) {
                return _this.generateTypesGroupTemplate(regularClassnames[classGroup], classGroup);
            })
                .join('\n');
            var pseudoClassnamesTemplate = _this.generateTypesTemplate({
                typeName: 'PseudoClasses',
                items: pseudoClassnames,
            });
            var allclassnamesExportTemplate = _this.generateTypesTemplate({
                typeName: 'Classes',
                items: Object.keys(regularClassnames)
                    .concat('PseudoClasses')
                    .map(function (x) { return 'T' + x; }),
            }).replace(/'/g, ''); // TODO: REFACTOR this to use generateTypesGroupTemplate.
            return (regularClassnamesTemplate +
                '\n\n' +
                pseudoClassnamesTemplate +
                '\n\n' +
                allclassnamesExportTemplate);
        };
        this.mainExportStatementsTemplate = function () {
            return ('export type TTailwindString = "TAILWIND_STRING"\n' +
                '\n' +
                'export type TKey = TClasses | TTailwindStringIMPORTED_T_CUSTOM_CLASSES_KEY\n' +
                '\n' +
                'export type TArg =\n' +
                '| TClasses\n' +
                '| null\n' +
                '| undefined\n' +
                '| {[key in TKey]?: boolean}\n' +
                '| TTailwindString\nIMPORTED_T_CUSTOM_CLASSES_ARG' +
                '\n' +
                'export type TTailwind = (...args: TArg[]) => TTailwindString\n' +
                '\n' +
                'export const classnames: TTailwind = classnamesLib as any\n\n' +
                'export const tw = classnames\n\n' +
                'export default tw\n\n');
        };
        /**
         * Generates types group template for a utility classes group object.
         *
         *
         * ### example:
         *
         * A utility group object as:
         *
         * ```js
         * const FlexBox = {
         *   alignSelf: ['self-auto', 'self-start', 'self-center'],
         *   flexWrap: ['flex-nowrap', 'flex-wrap'],
         * }
         *```
         *
         * will produce a template which looks like this:
         *
         * ```ts
         * export type TFlexWrap =
         * | 'flex-nowrap'
         * | 'flex-wrap';
         *
         * export type TAlignSelf =
         * | 'self-auto'
         * | 'self-start'
         * | 'self-center';
         *
         * export type TFlexBox = TFlexWrap | TAlignSelf;
         * ```
         */
        this.generateTypesGroupTemplate = function (group, groupName) {
            var members = Object.keys(group);
            var generateMembersStatements = function () {
                return members.map(function (member) {
                    return _this.generateTypesTemplate({
                        typeName: member,
                        items: group[member],
                        prefix: _this._configPrefix,
                    });
                });
            };
            var generateGroupStatement = function () {
                var getMembersStatementsReferences = function () {
                    return members.map(function (member) { return 'T' + lodash_1.default.upperFirst(member); }).join('\n  | ');
                };
                return ("export type T" + lodash_1.default.upperFirst(groupName) + " =" +
                    '\n  | ' +
                    getMembersStatementsReferences() +
                    '\n');
            };
            return generateMembersStatements().join('\n\n') + '\n\n' + generateGroupStatement();
        };
        /**
         * Generates TS types template from a list of strings.
         *
         * #### Example:
         *
         * Given typeName: 'baz' and items:
         * ```js
         * ['foo', 'bar']
         * ```
         *
         * generates:
         *
         * ```
         * export type TBaz
         *   | foo
         *   | bar;
         * ```
         *
         * @param typeName The name of the type (without T prefix).
         * @param items The list of the strings of items to add to the type name.
         * @param prefix The prefix to add to the beginning of each item of the string array.
         */
        this.generateTypesTemplate = function (
        // prettier-ignore
        _a) {
            var typeName = _a.typeName, items = _a.items, prefix = _a.prefix;
            return ("export type T" + lodash_1.default.upperFirst(typeName) + " =" +
                '\n  | ' +
                items
                    .flatMap(function (item) {
                    var classnamesThatShouldKeepTheDefaultSuffix = ['cursor'];
                    return classnamesThatShouldKeepTheDefaultSuffix.map(function (x) {
                        var shouldKeepDefaultSuffix = item.includes(x);
                        var name = shouldKeepDefaultSuffix ? item : item.replace('-DEFAULT', '');
                        return prefix ? "'" + prefix + name + "'" : "'" + name + "'";
                    });
                })
                    .join('\n  | '));
        };
        this._configPrefix = ConfigPrefix;
        this._generatedClassNames = generatedClassnames;
    }
    return FileContentGenerator;
}());
exports.FileContentGenerator = FileContentGenerator;
//# sourceMappingURL=FileContentGenerator.js.map