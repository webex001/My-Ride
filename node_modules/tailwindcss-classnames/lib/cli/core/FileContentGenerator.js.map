{"version":3,"file":"FileContentGenerator.js","sourceRoot":"","sources":["../../../src/cli/core/FileContentGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {TAllClassnames, TGeneratedClassnames} from '../types/classes';\n\nexport class FileContentGenerator {\n  private _configPrefix: string;\n  private _generatedClassNames: TGeneratedClassnames;\n\n  /**\n   * Initializes a new instance of the `FileContentGenerator` class.\n   * @param generatedClassnames The generated classnames to put in the template.\n   */\n  constructor(generatedClassnames: TGeneratedClassnames, ConfigPrefix: string) {\n    this._configPrefix = ConfigPrefix;\n    this._generatedClassNames = generatedClassnames;\n  }\n\n  public generateFileContent = (): string => {\n    return (\n      this.fileHeaderTemplate() +\n      '\\n\\n' +\n      this.importStatementsTemplate() +\n      '\\n\\n' +\n      this.allClassnamesTypesTemplate() +\n      '\\n\\n' +\n      this.mainExportStatementsTemplate()\n    );\n  };\n\n  private fileHeaderTemplate = (): string => {\n    return (\n      '/* eslint-disable */\\n' +\n      '/* tslint:disable */\\n' +\n      '\\n' +\n      '//////////////////////////////////////////////////////////////////////////////\\n' +\n      '/// Autogenerated by tailwindcss-classnames CLI. https://git.io/JtsPU\\n' +\n      '/// DO NOT EDIT THIS FILE DIRECTLY!\\n' +\n      '//////////////////////////////////////////////////////////////////////////////\\n'\n    );\n  };\n\n  private importStatementsTemplate = (): string => {\n    return \"import classnamesLib from 'clsx';\" + '\\n' + `T_CUSTOM_CLASSES_IMPORT_STATEMENT`;\n  };\n\n  private allClassnamesTypesTemplate = (): string => {\n    const regularClassnames = this._generatedClassNames.regularClassnames;\n    const pseudoClassnames = this._generatedClassNames.pseudoClassnames;\n\n    const regularClassnamesTemplate = Object.keys(regularClassnames)\n      .map(classGroup => {\n        return this.generateTypesGroupTemplate(\n          regularClassnames[classGroup as keyof TAllClassnames] as TAllClassnames,\n          classGroup,\n        );\n      })\n      .join('\\n');\n\n    const pseudoClassnamesTemplate = this.generateTypesTemplate({\n      typeName: 'PseudoClasses',\n      items: pseudoClassnames,\n    });\n\n    const allclassnamesExportTemplate = this.generateTypesTemplate({\n      typeName: 'Classes',\n      items: Object.keys(regularClassnames)\n        .concat('PseudoClasses')\n        .map(x => 'T' + x),\n    }).replace(/'/g, ''); // TODO: REFACTOR this to use generateTypesGroupTemplate.\n\n    return (\n      regularClassnamesTemplate +\n      '\\n\\n' +\n      pseudoClassnamesTemplate +\n      '\\n\\n' +\n      allclassnamesExportTemplate\n    );\n  };\n\n  private mainExportStatementsTemplate = (): string => {\n    return (\n      'export type TTailwindString = \"TAILWIND_STRING\"\\n' +\n      '\\n' +\n      'export type TKey = TClasses | TTailwindStringIMPORTED_T_CUSTOM_CLASSES_KEY\\n' +\n      '\\n' +\n      'export type TArg =\\n' +\n      '| TClasses\\n' +\n      '| null\\n' +\n      '| undefined\\n' +\n      '| {[key in TKey]?: boolean}\\n' +\n      '| TTailwindString\\nIMPORTED_T_CUSTOM_CLASSES_ARG' +\n      '\\n' +\n      'export type TTailwind = (...args: TArg[]) => TTailwindString\\n' +\n      '\\n' +\n      'export const classnames: TTailwind = classnamesLib as any\\n\\n' +\n      'export const tw = classnames\\n\\n' +\n      'export default tw\\n\\n'\n    );\n  };\n\n  /**\n   * Generates types group template for a utility classes group object.\n   *\n   *\n   * ### example:\n   *\n   * A utility group object as:\n   *\n   * ```js\n   * const FlexBox = {\n   *   alignSelf: ['self-auto', 'self-start', 'self-center'],\n   *   flexWrap: ['flex-nowrap', 'flex-wrap'],\n   * }\n   *```\n   *\n   * will produce a template which looks like this:\n   *\n   * ```ts\n   * export type TFlexWrap =\n   * | 'flex-nowrap'\n   * | 'flex-wrap';\n   *\n   * export type TAlignSelf =\n   * | 'self-auto'\n   * | 'self-start'\n   * | 'self-center';\n   *\n   * export type TFlexBox = TFlexWrap | TAlignSelf;\n   * ```\n   */\n  private generateTypesGroupTemplate = (group: TAllClassnames, groupName: string): string => {\n    const members = Object.keys(group);\n\n    const generateMembersStatements = (): string[] => {\n      return members.map(member => {\n        return this.generateTypesTemplate({\n          typeName: member,\n          items: group[member as keyof TAllClassnames] as string[],\n          prefix: this._configPrefix,\n        });\n      });\n    };\n\n    const generateGroupStatement = (): string => {\n      const getMembersStatementsReferences = (): string =>\n        members.map(member => 'T' + _.upperFirst(member)).join('\\n  | ');\n\n      return (\n        `export type T${_.upperFirst(groupName)} =` +\n        '\\n  | ' +\n        getMembersStatementsReferences() +\n        '\\n'\n      );\n    };\n\n    return generateMembersStatements().join('\\n\\n') + '\\n\\n' + generateGroupStatement();\n  };\n\n  /**\n   * Generates TS types template from a list of strings.\n   *\n   * #### Example:\n   *\n   * Given typeName: 'baz' and items:\n   * ```js\n   * ['foo', 'bar']\n   * ```\n   *\n   * generates:\n   *\n   * ```\n   * export type TBaz\n   *   | foo\n   *   | bar;\n   * ```\n   *\n   * @param typeName The name of the type (without T prefix).\n   * @param items The list of the strings of items to add to the type name.\n   * @param prefix The prefix to add to the beginning of each item of the string array.\n   */\n  private generateTypesTemplate = (\n    // prettier-ignore\n    {typeName, items, prefix}: {typeName: string; items: string[]; prefix?: string},\n  ): string => {\n    return (\n      `export type T${_.upperFirst(typeName)} =` +\n      '\\n  | ' +\n      items\n        .flatMap(item => {\n          const classnamesThatShouldKeepTheDefaultSuffix = ['cursor'];\n\n          return classnamesThatShouldKeepTheDefaultSuffix.map(x => {\n            const shouldKeepDefaultSuffix: boolean = item.includes(x);\n            const name = shouldKeepDefaultSuffix ? item : item.replace('-DEFAULT', '');\n\n            return prefix ? `'${prefix}${name}'` : `'${name}'`;\n          });\n        })\n        .join('\\n  | ')\n    );\n  };\n}\n"]}