#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var commander_1 = tslib_1.__importDefault(require("commander"));
var inquirer_1 = tslib_1.__importDefault(require("inquirer"));
var colors_1 = tslib_1.__importDefault(require("colors"));
var fs_1 = tslib_1.__importDefault(require("fs"));
var GeneratedFileWriter_1 = require("./core/GeneratedFileWriter");
commander_1.default
    // Configure CLI options
    .option('-i, --input <input>', 'Name or relative path of the TailwindCSS config file')
    .option('-o, --output <output>', 'Name or relative path of the generated types file', 'tailwindcss-classnames.ts')
    .option('-x, --extra <extra>', 'Name or relative path of the file with the custom extra types')
    // Define the action of the CLI
    .action(function (_a) {
    var input = _a.input, output = _a.output, extra = _a.extra;
    var isConfigFileFound = fs_1.default.existsSync('./tailwind.config.js');
    // If the config file is found or provided explicitly by the user...
    if (isConfigFileFound || !!input) {
        // Generate the types and write them to a file on disk
        return new GeneratedFileWriter_1.GeneratedFileWriter({
            configFilename: input ? input : 'tailwind.config.js',
            outputFilename: output,
            customClassesFilename: extra,
        }).write();
    }
    // Otherwise...
    else {
        // Prompt the user and ask to enter required information
        inquirer_1.default
            .prompt([
            {
                name: 'configFilename',
                type: 'input',
                default: 'tailwind.config.js',
                message: 'Tailwind configuration filename',
            },
            {
                name: 'outputFilename',
                type: 'input',
                default: 'tailwindcss-classnames.ts',
                message: 'Name of the file with generated types',
            },
            {
                name: 'customClassesFilename',
                type: 'input',
                default: null,
                message: 'Name or path of the file with the custom types',
            },
        ])
            .then(function (answers) {
            // Get the answers and use them to create the file with generated types
            return new GeneratedFileWriter_1.GeneratedFileWriter({
                configFilename: answers.configFilename,
                outputFilename: answers.outputFilename,
                customClassesFilename: answers.customClassesFilename,
            }).write();
        })
            // Catch any errors that occur when prompting the user...
            .catch(function (error) {
            if (error.isTtyError) {
                console.error(colors_1.default.red("Prompt couldn't be rendered in the current environment"));
            }
            else {
                console.error(colors_1.default.red('Something went wrong with the prompt'));
            }
        });
    }
});
commander_1.default.parse(process.argv);
//# sourceMappingURL=index.js.map