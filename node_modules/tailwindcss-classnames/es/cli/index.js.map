{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cli/index.ts"],"names":[],"mappings":";AAEA,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,IAAI,CAAC;AAEpB,OAAO,EAAC,mBAAmB,EAAC,MAAM,4BAA4B,CAAC;AAQ/D,SAAS;IACP,wBAAwB;KACvB,MAAM,CAAC,qBAAqB,EAAE,sDAAsD,CAAC;KACrF,MAAM,CACL,uBAAuB,EACvB,mDAAmD,EACnD,2BAA2B,CAC5B;KACA,MAAM,CAAC,qBAAqB,EAAE,+DAA+D,CAAC;IAE/F,+BAA+B;KAC9B,MAAM,CAAC,UAAC,EAAsD;QAArD,KAAK,WAAA,EAAE,MAAM,YAAA,EAAE,KAAK,WAAA;IAC5B,IAAM,iBAAiB,GAAY,EAAE,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;IACzE,oEAAoE;IACpE,IAAI,iBAAiB,IAAI,CAAC,CAAC,KAAK,EAAE;QAChC,sDAAsD;QACtD,OAAO,IAAI,mBAAmB,CAAC;YAC7B,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,oBAAoB;YACpD,cAAc,EAAE,MAAM;YACtB,qBAAqB,EAAE,KAAK;SAC7B,CAAC,CAAC,KAAK,EAAE,CAAC;KACZ;IACD,eAAe;SACV;QACH,wDAAwD;QACxD,QAAQ;aACL,MAAM,CAAC;YACN;gBACE,IAAI,EAAE,gBAAgB;gBACtB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,oBAAoB;gBAC7B,OAAO,EAAE,iCAAiC;aAC3C;YACD;gBACE,IAAI,EAAE,gBAAgB;gBACtB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,2BAA2B;gBACpC,OAAO,EAAE,uCAAuC;aACjD;YACD;gBACE,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,gDAAgD;aAC1D;SACF,CAAC;aACD,IAAI,CAAC,UAAC,OAAyB;YAC9B,uEAAuE;YACvE,OAAO,IAAI,mBAAmB,CAAC;gBAC7B,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;aACrD,CAAC,CAAC,KAAK,EAAE,CAAC;QACb,CAAC,CAAC;YACF,yDAAyD;aACxD,KAAK,CAAC,UAAA,KAAK;YACV,IAAI,KAAK,CAAC,UAAU,EAAE;gBACpB,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC,CAAC;aACrF;iBAAM;gBACL,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC,CAAC;aACnE;QACH,CAAC,CAAC,CAAC;KACN;AACH,CAAC,CAAC,CAAC;AAEL,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport commander from 'commander';\nimport inquirer from 'inquirer';\nimport colors from 'colors';\nimport fs from 'fs';\n\nimport {GeneratedFileWriter} from './core/GeneratedFileWriter';\n\ntype TInquirerAnswers = {\n  configFilename: string;\n  outputFilename: string | void;\n  customClassesFilename: string | void;\n};\n\ncommander\n  // Configure CLI options\n  .option('-i, --input <input>', 'Name or relative path of the TailwindCSS config file')\n  .option(\n    '-o, --output <output>',\n    'Name or relative path of the generated types file',\n    'tailwindcss-classnames.ts',\n  )\n  .option('-x, --extra <extra>', 'Name or relative path of the file with the custom extra types')\n\n  // Define the action of the CLI\n  .action(({input, output, extra}: {[key: string]: string | void}) => {\n    const isConfigFileFound: boolean = fs.existsSync('./tailwind.config.js');\n    // If the config file is found or provided explicitly by the user...\n    if (isConfigFileFound || !!input) {\n      // Generate the types and write them to a file on disk\n      return new GeneratedFileWriter({\n        configFilename: input ? input : 'tailwind.config.js',\n        outputFilename: output,\n        customClassesFilename: extra,\n      }).write();\n    }\n    // Otherwise...\n    else {\n      // Prompt the user and ask to enter required information\n      inquirer\n        .prompt([\n          {\n            name: 'configFilename',\n            type: 'input',\n            default: 'tailwind.config.js',\n            message: 'Tailwind configuration filename',\n          },\n          {\n            name: 'outputFilename',\n            type: 'input',\n            default: 'tailwindcss-classnames.ts',\n            message: 'Name of the file with generated types',\n          },\n          {\n            name: 'customClassesFilename',\n            type: 'input',\n            default: null,\n            message: 'Name or path of the file with the custom types',\n          },\n        ])\n        .then((answers: TInquirerAnswers) => {\n          // Get the answers and use them to create the file with generated types\n          return new GeneratedFileWriter({\n            configFilename: answers.configFilename,\n            outputFilename: answers.outputFilename,\n            customClassesFilename: answers.customClassesFilename,\n          }).write();\n        })\n        // Catch any errors that occur when prompting the user...\n        .catch(error => {\n          if (error.isTtyError) {\n            console.error(colors.red(\"Prompt couldn't be rendered in the current environment\"));\n          } else {\n            console.error(colors.red('Something went wrong with the prompt'));\n          }\n        });\n    }\n  });\n\ncommander.parse(process.argv);\n"]}