{"version":3,"file":"TailwindConfigParser.js","sourceRoot":"","sources":["../../../src/cli/core/TailwindConfigParser.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {defaultTailwindConfig} from '../lib/defaultTailwindConfig';\nimport {\n  TTailwindCSSConfig,\n  TConfigVariants,\n  TConfigDarkMode,\n  TConfigPlugins,\n} from '../types/config';\nimport {TConfigTheme, TThemeItems} from '../types/config';\n/* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-return */\n\n/**\n * Parses the tailwind config object\n */\nexport class TailwindConfigParser {\n  private readonly _mode: string | undefined;\n  private readonly _prefix: string;\n  private readonly _separator: string;\n  private readonly _darkMode: TConfigDarkMode;\n  private readonly _themeConfig: TConfigTheme;\n  private _evaluatedTheme: TConfigTheme | null;\n  private readonly _variantsConfig: TConfigVariants;\n  private readonly _pluginsConfig: TConfigPlugins;\n\n  constructor(tailwindConfig: TTailwindCSSConfig, plugins: TConfigPlugins) {\n    this._mode = tailwindConfig?.mode;\n    this._prefix = _.isEmpty(tailwindConfig?.prefix) ? '' : (tailwindConfig.prefix as string);\n    this._darkMode = _.isEmpty(tailwindConfig?.darkMode)\n      ? false\n      : (tailwindConfig.darkMode as TConfigDarkMode);\n    this._separator = _.isEmpty(tailwindConfig.separator)\n      ? ':'\n      : (tailwindConfig.separator as string);\n    this._variantsConfig = _.isEmpty(tailwindConfig.variants)\n      ? defaultTailwindConfig.variants // Order does matter, defaultVariants will be overridden by themeVariants.\n      : {...defaultTailwindConfig.variants, ...tailwindConfig.variants};\n    this._themeConfig = {...defaultTailwindConfig.theme, ...tailwindConfig.theme};\n    this._evaluatedTheme = null;\n    this._pluginsConfig = plugins;\n  }\n\n  /**\n   *  Gets the config mode value\n   */\n  public getMode = (): string | undefined => this._mode;\n\n  /**\n   *  Gets the config prefix value\n   */\n  public getPrefix = (): string => this._prefix;\n\n  /**\n   *  Gets the config dark mode value\n   */\n  public getDarkMode = (): TConfigDarkMode => this._darkMode;\n\n  /**\n   * Gets the config separator value\n   */\n  public getSeparator = (): string => this._separator;\n\n  /**\n   * Gets the config plugins value\n   */\n  public getPlugins = (): TConfigPlugins | null => {\n    const {pluginTypography, pluginCustomForms} = this._pluginsConfig;\n\n    return pluginTypography || pluginCustomForms ? this._pluginsConfig : null;\n  };\n\n  /**\n   *  Gets the config theme object\n   */\n  public getTheme = (): TThemeItems => {\n    // Check whether config was evaluated before; if yes, return cached result instead of re-calc\n    if (this._evaluatedTheme) {\n      return this._evaluatedTheme;\n    }\n\n    /** Evaluate function closures inside theme config and get the evaluated theme object */\n    const evaluateTheme = (valueSourceTheme?: TThemeItems): TThemeItems => {\n      // Pick the theme config items except theme.extend\n      const coreTheme = _.omit(this._themeConfig, 'extend');\n      // Iterate over theme object items and run the evaluator on it\n      const valueEvaluator = new ThemeClosuresEvaluator(coreTheme);\n      for (const [key, value] of Object.entries(this._themeConfig)) {\n        let evaluatorResult = valueEvaluator.evaluate(value, valueSourceTheme);\n        // Need to make sure that extensions for specific properties are considered\n        // For example when 'width' is extended, which is originally based on spacing\n        if (valueSourceTheme && _.isObject(evaluatorResult)) {\n          const sourceValue = valueSourceTheme[key as keyof TThemeItems];\n          evaluatorResult = {...(_.isObject(sourceValue) ? sourceValue : {}), ...evaluatorResult};\n        }\n        coreTheme[key as keyof TThemeItems] = evaluatorResult;\n      }\n\n      // Return the result of evaluation\n      return coreTheme;\n    };\n\n    /** Evaluate function closures inside theme.extend config and get the evaluated theme.extend object */\n    const evaluateThemeExtend = (): Partial<TConfigTheme['extend']> => {\n      // Get the theme.extend property value\n      const themeExtend = this._themeConfig.extend;\n\n      // Only when theme.extend exists...\n      if (themeExtend) {\n        // Iterate over every item and evaluate closures in it\n        const valueEvaluator = new ThemeClosuresEvaluator(themeExtend);\n        for (const [key, value] of Object.entries(themeExtend))\n          themeExtend[key as keyof TThemeItems] = valueEvaluator.evaluate(value);\n      }\n\n      // Return the result of the evaluation\n      return themeExtend;\n    };\n\n    // Merge theme with extensions\n    const themeWithMergedExtend = _.merge(evaluateTheme(), evaluateThemeExtend());\n    // Evaluate the theme again, however taking the values from the merge result\n    this._evaluatedTheme = evaluateTheme(themeWithMergedExtend);\n    delete this._evaluatedTheme?.extend;\n\n    // Return the evaluated theme\n    return this._evaluatedTheme;\n  };\n\n  /**\n   * Get config variants object\n   */\n  public getVariants = (): Omit<TConfigVariants, 'extend'> => {\n    // Get the `variants.extend` object\n    const variantsConfigExtend = this._variantsConfig?.extend;\n\n    // If the variants.extend exists...\n    if (!!variantsConfigExtend) {\n      // Return the result of merging the variants with extend\n      return _.mergeWith(\n        this._variantsConfig,\n        variantsConfigExtend,\n        (variantsValues, variantsExtendValues) => {\n          if (_.isArray(variantsValues)) {\n            return variantsValues.concat(variantsExtendValues);\n          }\n        },\n      );\n      // Otherwise...\n    } else {\n      // Return the variants\n      return this._variantsConfig;\n    }\n  };\n\n  /**\n   * Get the value (and key) of a supplied theme property.\n   * @param themeProperty The theme property name\n   */\n  public getThemeProperty = (\n    themeProperty: keyof TThemeItems,\n  ): [string[], Array<string | Record<string, string>>] => {\n    return [\n      Object.keys(this.getTheme()[themeProperty]),\n      Object.values(this.getTheme()[themeProperty]),\n    ];\n  };\n}\n\n/**\n * The class responsible for evaluating the closures inside the config.\n */\nclass ThemeClosuresEvaluator {\n  constructor(private themeConfig: Partial<TThemeItems>) {}\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public evaluate(value: any, valueSourceTheme?: TThemeItems): any {\n    // If a value is a function...\n    if (_.isFunction(value)) {\n      // evaluate the value by running the evaluator methods in this class.\n      return value(this.makeThemePathResolver(valueSourceTheme || this.themeConfig), {\n        negative: ThemeClosuresEvaluator.negative.bind(this),\n        breakpoints: ThemeClosuresEvaluator.breakpoints.bind(this),\n      });\n    }\n    // Otherwise, return the value.\n    else {\n      return value;\n    }\n  }\n\n  /**\n   * Creates evaluator for `theme()` functions/closures in config file\n   */\n  private makeThemePathResolver = (theme: Partial<TThemeItems>) => (\n    path: string,\n  ): Record<string, unknown> => {\n    return _.get(theme, _.trim(path, `'\"`)) as Record<string, Record<string, string> | string>;\n  };\n\n  /**\n   * Evaluate `negative()` functions/closures\n   */\n  private static negative(item: Record<string, string>): Record<string, string> {\n    const itemCopy = {...item};\n    for (const [key] of Object.entries(itemCopy)) {\n      itemCopy['-' + key] = itemCopy[key];\n      delete itemCopy[key];\n    }\n    return itemCopy;\n  }\n\n  /**\n   * Evaluate `breakpoints()` functions/closures\n   */\n  private static breakpoints(item: Record<string, string>): Record<string, string> {\n    const itemCopy = {...item};\n    for (const [key] of Object.entries(itemCopy)) {\n      itemCopy['screen-' + key] = itemCopy[key];\n      delete itemCopy[key];\n    }\n    return itemCopy;\n  }\n}\n"]}